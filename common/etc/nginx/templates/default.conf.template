js_import /etc/nginx/include/awscredentials.js;
js_import /etc/nginx/include/s3gateway.js;


# We include only the variables needed for the authentication signatures that
# we plan to use.
include /etc/nginx/conf.d/gateway/v${AWS_SIGS_VERSION}_js_vars.conf;

# Extracts only the path from the requested URI. This strips out all query
# parameters and anchors in order to prevent extraneous data from being sent
# to S3.
map $request_uri $uri_full_path {
    "~^(?P<path>.*?)(\?.*)*$"  $path;
}

# Remove/replace a portion of request URL (if configured)
map $uri_full_path $uri_path {
	"~^$STRIP_LEADING_DIRECTORY_PATH(.*)"  $PREFIX_LEADING_DIRECTORY_PATH$1;
    default $PREFIX_LEADING_DIRECTORY_PATH$uri_full_path;
}

# S3_HOST_HEADER is set in the startup script
# (either ./common/docker-entrypoint.sh or ./standalone_ubuntu_oss_install.sh)
# based on the S3_STYLE configuration option.
js_var $s3_host ${S3_HOST_HEADER};

js_var $indexIsEmpty true;
js_var $forIndexPage true;
# This creates the HTTP authentication header to be sent to S3
js_set $s3auth s3gateway.s3auth;
js_set $awsSessionToken awscredentials.sessionToken;
js_set $s3uri s3gateway.s3uri;

server {
    include /etc/nginx/conf.d/gateway/server_variables.conf;

    # Don't display the NGINX version number because we don't want to reveal
    # information that could be used to find an exploit.
    server_tokens off;

    proxy_cache_convert_head off;

    # If you need to support proxying range request, refer to this article:
    # https://www.nginx.com/blog/smart-efficient-byte-range-caching-nginx/

    # Do not proxy the S3 SOAP API. The S3 API has a less-documented feature
    # where the object name "soap" is used for the SOAP API. We don't allow
    # access to it.
    location /soap {
        return 404;
    }

    location /health {
        return 200;
    }

    location / {
        # This value is templated in based on the value of $CORS_ENABLED. When
        # CORS is enabled, acceptable methods are GET, HEAD, and OPTIONS.
        # Otherwise, they are GET and HEAD.
        limit_except ${LIMIT_METHODS_TO} {}

        # CORS is implemented by returning the appropriate headers as part of
        # the response to an OPTIONS request. If you want to customize the
        # CORS response, the cors.conf.template file can be overwritten and
        # extended to meet your needs.
        include /etc/nginx/conf.d/gateway/cors.conf;

        auth_request /aws/credentials/retrieve;

        # Redirect to the proper location based on the client request - either
        # @s3 or @error405.

        js_content s3gateway.redirectToS3;
    }

    location /aws/credentials/retrieve {
        internal;
        js_content awscredentials.fetchCredentials;

        include /etc/nginx/conf.d/gateway/js_fetch_trusted_certificate.conf;
    }

    # This is the primary location that proxies the request to s3
    # See the included s3_location_common.conf file for all logic
    location @s3 {
        proxy_pass_header Cache-Control;
        include /etc/nginx/conf.d/gateway/s3_location_common.conf;
    }

    location @error404 {
        # The CORS configuration needs to be imported in several places in order for
        # it to be applied within different contexts.
        include /etc/nginx/conf.d/gateway/cors.conf;

        return 404;
    }

    location @trailslashControl {
        # Checks if requesting a folder without trailing slash, and return 302
        # appending a slash to it when using for static site hosting.
        js_content s3gateway.trailslashControl;
    }

    location @trailslash {
        # 302 to request without slashes
        # Adding a ? to the end of the replacement param in `rewrite` prevents it from
        # appending the query string.
        rewrite ^ $scheme://$http_host$uri/$is_args$query_string? redirect;
    }

    # Provide a hint to the client on 405 errors of the acceptable request methods
    error_page 405 @error405;
    location @error405 {
        add_header Allow "${LIMIT_METHODS_TO_CSV}" always;
        return 405;
    }

    include /etc/nginx/conf.d/gateway/s3_server.conf;
}
